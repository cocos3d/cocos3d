[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION Cube mapping example
	COPYRIGHT	2013, The Brenwill Workshop Ltd. All rights reserved.
[/HEADER]

// Load the textures in code, since we need six of them for non-PVR cube-maps
[TEXTURES] 
[/TEXTURES]

///////////////////////////////////////////////
// Environment cube-map overlaid on an underlying texture.
//
// The cube map appears to reflect back the environment onto the underlying
// texture of the node.
///////////////////////////////////////////////
[EFFECT]
	NAME			CubeReflection
 
	VERTEXSHADER	CubeReflection_vsh
	FRAGMENTSHADER	CubeReflection_fsh
[/EFFECT]

[VERTEXSHADER]
	NAME 		CubeReflection_vsh

	[GLSL_CODE]
		precision mediump float;
 
		attribute vec4	a_cc3Position;
		attribute vec3	a_cc3Normal;
		attribute vec2	a_cc3TexCoord;
		
		uniform mat4	u_cc3MatrixModelViewProj;
		uniform mat4	u_cc3MatrixModel;
		uniform mat3	u_cc3MatrixModelViewInvTran;
	
		uniform vec3	u_cc3LightPositionEyeSpace;
		uniform vec3	u_cc3CameraPositionModel;
	
		varying highp	float	vIntensity;
		varying lowp	vec2	vTexCoord;
		varying lowp	vec3	vReflectDir;
 
		vec3 vtxNormEye;
	
		void main(void) {
			gl_Position = u_cc3MatrixModelViewProj * a_cc3Position;
			vtxNormEye = u_cc3MatrixModelViewInvTran * a_cc3Normal;
			
			vIntensity = 0.05 * dot(vtxNormEye, u_cc3LightPositionEyeSpace) + 0.95;
//			vIntensity = (0.05 * dot(vtxNormEye, u_cc3LightPositionEyeSpace) + 0.95) * 0.5;

			vec3 eyeDir = normalize(u_cc3CameraPositionModel - a_cc3Position.xyz);
			vReflectDir = (u_cc3MatrixModel * vec4(reflect(eyeDir, a_cc3Normal), 0.0)).xyz;
			
			vTexCoord	= a_cc3TexCoord.st;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		CubeReflection_fsh

	[GLSL_CODE]
		precision mediump float;
	
		varying highp 	float	vIntensity;
		varying lowp 	vec2	vTexCoord;
		varying lowp 	vec3 	vReflectDir;
	
		uniform float			u_cc3MaterialReflectivity;
		uniform sampler2D		s_cc3Texture2D;
		uniform samplerCube		s_cc3TextureCube;
 
		void main (void) {
			vec4 texColor = texture2D(s_cc3Texture2D, vTexCoord);
			vec4 reflectColor = textureCube(s_cc3TextureCube, vReflectDir);
			vec4 mixColor = mix(texColor, reflectColor, u_cc3MaterialReflectivity) * vIntensity;
			gl_FragColor = vec4(mixColor.rgb, texColor.a);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 

///////////////////////////////////////////////
// Environment cube-map used as a skybox.
// This is typically applied to a large sphere or box surrounding the scene.
///////////////////////////////////////////////
[EFFECT]
	NAME			SkyBox
 
	VERTEXSHADER	SkyBox_vsh
	FRAGMENTSHADER	SkyBox_fsh
[/EFFECT]

[VERTEXSHADER]
	NAME 		SkyBox_vsh
 
	[GLSL_CODE]
 attribute vec4	a_cc3Position;
 
 uniform mat4	u_cc3MatrixModelViewProj;
 
 varying mediump vec3	vRadialDir;
 
 void main(void) {
	gl_Position = u_cc3MatrixModelViewProj * a_cc3Position;
	vRadialDir = -a_cc3Position.xyz;
}
	[/GLSL_CODE]
[/VERTEXSHADER]
 
[FRAGMENTSHADER]
	NAME 		SkyBox_fsh
 
	[GLSL_CODE]
 uniform samplerCube	s_cc3TextureCube;
 
 varying mediump vec3 	vRadialDir;
 
 void main (void) {
	gl_FragColor = textureCube(s_cc3TextureCube, vRadialDir);
}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

